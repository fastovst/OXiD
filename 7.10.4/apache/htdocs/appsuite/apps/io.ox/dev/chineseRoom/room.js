define("io.ox/dev/chineseRoom/room",["io.ox/realtime/groups","io.ox/core/event"],function(e,t){"use strict";function n(n){var s=this;this.group=e.getGroup("synthetic.china://"+n),this.collection=new Backbone.Collection,t.extend(this),this.join=function(e){return this.group.join(e)},this.leave=function(e){return this.group.leave(e)},this.destroy=function(){this.group.destroy(),delete o[n]},this.say=function(e){return this.group.send({element:"message",payloads:[{element:"action",data:"say"},{element:"message",namespace:"china",data:e}]})},this.sayAndTrace=function(e,t){return this.group.send({tracer:t,element:"message",payloads:[{element:"action",data:"say"},{element:"message",namespace:"china",data:e}]})},this.requestLog=function(){return this.group.send({element:"message",payloads:[{element:"action",data:"getLog"}]})},this.requestLogByQuery=function(){return this.group.query({element:"message",payloads:[{element:"action",data:"getLog"}]})},this.group.on("receive",function(e,t){var n=t.get("china","message");n&&(console.log(t.from,n.data),s.trigger("received",{from:t.from,message:n.data})),t.get("china","replay")&&_(t.getAll("china","replay")).each(function(e){console.log(e.data.sender,e.data.message)})}),this.group.on("offline",function(){console.log("Offline!")}),this.group.on("online",function(){console.log("Online!")}),this.group.on("reset",function(){console.log("Reset!")}),this.group.on("error:notMember",function(){console.log("Not a member!")})}var o={};return{getRoom:function(e){return o[e]?o[e]:(o[e]=new n(e),o[e])}}});