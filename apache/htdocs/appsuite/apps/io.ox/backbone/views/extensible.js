define("io.ox/backbone/views/extensible",["io.ox/backbone/views/disposable","io.ox/core/extensions"],function(t,i){"use strict";function e(){return this.disableFormElements(),this.activeElement=this.activeElement||document.activeElement,this.$el.css("opacity",.5),this}function n(){return this.enableFormElements(),this.$el.css("opacity",""),$.contains(this.el,this.activeElement)&&$(this.activeElement).focus(),this.activeElement=null,this}var s={};return t.extend({constructor:function(s){this.options=s||{},this.point=i.point(this.point||this.options.point),t.prototype.constructor.apply(this,arguments),this.busy=e.bind(this),this.idle=n.bind(this),this.$el.attr("data-point",this.options.point),this.extensions&&this.extend(this.extensions)},extend:function(t){if(s[this.point.id])return this;ox.debug&&!this.point.id&&console.warn("Using extend on extensible view without point.id. Be sure this is what you want. Function will be called in every extensible view without point.id (most modal dialogs for example)");var i=100;return _(t).each(function(t,e){this.point.extend({id:e,index:i,render:t}),i+=100},this),this},invoke:function(t){var e=new i.Baton({view:this,model:this.model});return this.point.invoke(t||"render",this,e),s[this.point.id]=!0,this},inject:function(t){return _.extend(this,t)},build:function(t){return t.call(this),this},render:function(){return this.invoke("render")},disableFormElements:function(){this.$(":input").each(function(){"cancel"!==$(this).attr("data-action")&&$(this).toggleClass("disabled",$(this).prop("disabled")).prop("disabled",!0)})},enableFormElements:function(){this.$(":input").each(function(){$(this).prop("disabled",$(this).hasClass("disabled")).removeClass("disabled")})}})});